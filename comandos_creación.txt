-- Creacion de archivo vite

npm create vite@latest clientePro
-React
-TypeScript


-- Entramos a clientePro
cd clientePro
npm install
npm run dev -- --host 0.0.0.0

-- Entramos al Visual Code

cordova create clienteproApp
cd clienteproApp
cordova platform add android
cd ..

-----> vite.config.ts aqui hay que configurar

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  build: {
    outDir: ''saigotecApp/www',
  },
})


npm run build <-- en el sistema base construirremos primero de react el html, css , javascript, que estara en la carpeta "www"
    cd clienteproApp
    cordova build android  <-- construye la Aplicacion
    cordova run android    <-- Instala la aplicacion en el celular
    cordova emulate android

    cordova emulate ios
    cordova run ios
}



Instlaremos Electron al proyecto Base
cd ..
npm install electron --save-dev
npm install electron-builder -D

luego de eso crearemos una carpeta llamada clienteElect luego crearemos una archivo main.js

contenido del main
--
import { app, BrowserWindow } from 'electron';
import path, { dirname } from 'path';
import { fileURLToPath } from 'url';
import { spawn } from 'child_process';

// Emular __dirname en ES modules
const __dirname = dirname(fileURLToPath(import.meta.url));

let serverProcess;

function createWindow() {
  const win = new BrowserWindow({
    width: 1024,
    height: 768,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      nodeIntegration: true,
      contextIsolation: false,
    },
  });

  // Iniciar el servidor local
  const serverPath = path.join(__dirname, '../node_modules/http-server/bin/http-server');
  const wwwPath = path.join(__dirname, '../vadeacuerdoalproyectoApp/www');
  serverProcess = spawn('node', [serverPath, wwwPath, '-p', '8080']);

  // Esperar a que el servidor estÃ© listo antes de cargar la URL
  serverProcess.stdout.on('data', (data) => {
    if (data.toString().includes('Available on')) {
      win.loadURL('http://localhost:8080');
    //   win.webContents.openDevTools();  // Abre DevTools para depurar
    }
  });

  win.on('closed', () => {
    // Detener el servidor cuando se cierre la ventana
    if (serverProcess) serverProcess.kill();
  });
}

app.whenReady().then(createWindow).catch((err) => {
  console.error('Error al crear la ventana:', err);
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});


Ejecutar la Aplicaciond e escritorio
npx electron ./clienteElect/main.js


Necesaitaremos dos dependencias antes:

npm install http-server --save-dev

para poder usar comando de consurencias de ejecuciones se necesita:

npm install concurrently --save-dev




en el package.json como ejemplo

 "scripts": {
    "dev": "vite --host 0.0.0.0",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "cordova-android": "cd clienteproApp && cordova build android",
    "electron": "npm run build && electron ./clienteElect/main.js",
    "all": "npm run build && npm run cordova-android && npm run electron",
    "dev-all": "npm run build && concurrently \"vite --host 0.0.0.0\" \"npm run dev-cordova\" \"npm run dev-electron\"",
    "dev-cordova": "cd clienteproApp && cordova run android",
    "dev-electron": "electron ./clienteElect/main.js"
  },




Usar scrcpy
adb devices
npm run dev-cordova